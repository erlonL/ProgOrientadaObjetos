* Sistema de pagamentos

Crie uma classe pagamento que represente um pagamento genérico.
- campos: valor, data, numero_cartao
Crie uma classe pagamento_online que herde da classe pagamento.
- campos: nome_site, codigo_seguranca
Crie uma classe pagamento_presencial que herde da classe pagamento.
- campos: nome_loja
Crie uma classe template fatura que represente uma fatura com multiplos
pagamentos (online ou presencial). 
- A classe deve ter um campo double limite_credito que representa o limite
- A classe deve ter um campo vector de pagamentos. 
- A classe deve ter um método adicionar_pagamento() que recebe como parâmetro 
um pagamento e o adiciona ao vector de pagamentos.
- A classe deve ter um método calcular_valor_total() que calcula o valor total
da fatura com base nos pagamentos adicionados.

Sobrecarregue o operador << para imprimir as informações de um objeto da classe fatura.
Sobrecarregue o operador + para adicionar um pagamento a uma fatura.
Sobrecarregue o operador - para remover um pagamento de uma fatura.

Crie uma função friend template chamada transferir_pagamentos() que receba como parâmetros
dois objetos da classe fatura (com o mesmo tipo template) e transfira todos os pagamentos
da primeira fatura para a segunda fatura.

Adicione tratamento de exceções ao código para lidar com situações em que o usuário tente
adicionar pagamentos acima do limite (campo limite_credito).

Crie uma funcao main que crie três objetos da classe fatura, com pelo menos três pagamentos
cada. Imprima as informações de cada fatura e transfira os pagamentos da primeira fatura
para a segunda fatura. Imprima novamente as informações de cada fatura.

-------------------------------------------------------------------------------------------

* Sistema de cadastro de produtos

Crie uma classe produto que represente um produto genérico.
- campos: valor, codigo_barras, nome_fabricante
Crie uma classe produto_alimenticio que herde da classe produto.
- campos: data_validade, data_fabricacao
Crie uma classe produto_eletronico que herde da classe produto.
- campos: voltagem, potencia
Crie uma classe template estoque que represente uma estoque com multiplos
produtos (alimenticios ou eletronicos). 
- A classe deve ter um campo int limite_armazenamento que representa o limite
de produtos no estoque.
- A classe deve ter um campo vector de produtos. 
- A classe deve ter um método adicionar_produto() que recebe como parâmetro 
um produto e o adiciona ao vector de produtos.
- A classe deve ter um método calcular_valor_total() que calcula o valor total
do estoque com base nos produtos adicionados.

Sobrecarregue o operador << para imprimir as informações de um objeto da classe estoque.
Sobrecarregue o operador + para adicionar um produto ao estoque.
Sobrecarregue o operador - para remover um produto do estoque.

Crie uma função friend template chamada transferir_produtos() que receba como parâmetros
dois objetos da classe estoque (com o mesmo tipo template) e transfira todos os produtos
do primeiro estoque para o segundo estoque.

Adicione tratamento de exceções ao código para lidar com situações em que o usuário tente
adicionar produtos acima do limite do estoque (campo limite_armazenamento).

Crie uma funcao main que crie três objetos da classe estoque, com pelo menos três produtos
cada. Imprima as informações de cada estoque e transfira os produtos do primeiro estoque
para o segundo estoque. Imprima novamente as informações de cada estoque.

-------------------------------------------------------------------------------------------

* Sistema de Desenho de Polígonos

    1) Implementar as classes descritas abaixo em C++
        a. Canvas (Tela de Desenho)
            i. Atributos (tipos entre parênteses)
                1. Tamanho em pixels (Array contendo valores inteiros para tamanho em pixels da altura e da largura da tela para desenho)
                2. Conjunto de Polígonos do Canvas (Array contendo os polígonos criados pelo usuário)
            ii. Métodos
                1. Recuperar tamanho (retorna Array de inteiros com tamanho em pixels da tela de desenho – largura e altura)
                2. Recuperar polígonos do canvas (retorna Array de Polígonos)
                3. Exibir polígonos (exibe na tela quais polígonos pertencem ao canvas)
        b. Polígono
            i. Atributos (tipos entre parênteses)
                1. Coordenadas (x,y) do centro do polígono (Array de Inteiros)
                2. Z-Index – coordenada Z para sobreposição de polígonos (Inteiro)
                3. Cor do polígono (String) 
            ii. Métodos 
                1. Calcular e retornar Área (retorna Inteiro) – método virtual
                2. Calcular e retornar Perímetro (retorna Inteiro) – método virtual 
                3. Retornar centro do polígono (retorna Array com valores Inteiros para ponto do centro) 
                4. Retornar cor do polígono (retorna String)
        c. Retângulo (herança pública de Polígono)
            i. Atributos
                1. Base em pixels (Inteiro)
                2. Altura em pixels (Inteiro)
            ii. Métodos
                1. Calcular e retornar área (retorna Inteiro)
                2. Calcular e retornar perímetro (retorna Inteiro)
        d. Círculo (herança pública de Polígono)
            i. Atributos
                1. Raio (Inteiro)
            ii. Métodos
                1. Calcular e retornar área (retorna Inteiro)
                2. Calcular e retornar perímetro (retorna Inteiro)
        e. Mais dois tipos de polígonos (ex. Triângulo, Pentágono, Hexágono etc.) à escolha do aluno, com atributos e métodos equivalentes (herança pública de Polígono)

 Implementar um programa em C++ que crie uma instância da classe Canvas, a partir de informações fornecidas pelo usuário, e em seguida criar um loop de execução que apresente um menu com as opções apresentadas a seguir, cujas funcionalidades devem ser realizadas quando selecionadas:
        a. Exibir informações do canvas (tamanho e quantos polígonos possui)
        b. Inserir Retângulo
        c. Inserir Círculo
        d. Inserir Polígono definido pelo Aluno (1) 
        e. Inserir Polígono definido pelo Aluno (2)
        f. Exibir Polígonos na tela (listar polígonos e exibir informações: tipo, centro, cor, área e perímetro)
        g. Eliminar polígono pelo índice de inserção (índice associado à ordem de criação do Polígono)
        h. Salvar um arquivo de texto com a lista de polígonos do canvas (com as informações: tipo, centro, cor, área e perímetro).
        i. Sair
Faça o programa lançar exceções caso valores expúrios sejam inseridos; trate as exceções de forma que o cadastro seja cancelado e se solicite ao usuário para que faça um novo cadastro.
