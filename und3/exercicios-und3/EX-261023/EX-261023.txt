Sistema de Gerenciamento de Funcionários em C++

Desenvolva um programa em C++ que simule um sistema de gerenciamento de funcionários em uma empresa. O programa deve ser orientado a objetos e suportar diferentes tipos de funcionários, como empregados regulares, gerentes e estagiários. Além disso, o programa deve incorporar os seguintes recursos:

1. **Tratamento de Exceções**:
   - Implemente tratamento de exceções para lidar com erros, como valores inválidos de salário ou acesso a funcionários inexistentes.

2. **Métodos e Atributos de Classe**:
   - Crie métodos de classe para realizar operações comuns em funcionários, como aumentar o salário de todos os funcionários em uma porcentagem.
   - Implemente atributos de classe, como um contador para manter o número total de funcionários na empresa.

3. **Padrão de Projeto Singleton**:
   - Utilize o padrão de projeto Singleton para criar uma classe `Empresa` que represente a empresa como uma única instância em todo o programa. Isso garantirá que apenas uma empresa exista.

4. **Templates**:
   - Use templates para criar uma estrutura de dados flexível que possa conter funcionários de diferentes tipos.

5. **Estruturas de Dados STL**:
   - Utilize as estruturas de dados da STL (Standard Template Library) para armazenar os funcionários da empresa, como um `vector` ou `map`.

Requisitos:

1. Crie uma classe base chamada `funcionario` que contenha informações comuns a todos os funcionários, como nome, ID e salário. Use templates para permitir diferentes tipos numéricos para o salário (por exemplo, `double` ou `int`).

2. Derive classes para representar diferentes tipos de funcionários:
   - `empregado_regular`: Funcionário regular com salário fixo.
   - `gerente`: Funcionário com um salário fixo e bônus adicional.
   - `estagiario`: Funcionário em treinamento com um salário menor.

3. Use herança múltipla para criar uma classe `empregado_gerente` que herda de ambas as classes `empregado_regular` e `gerente`. Este funcionário é um empregado regular com responsabilidades de gerenciamento e recebe tanto um salário fixo quanto um bônus.

4. Implemente o tratamento de exceções para operações como tentativas de criar funcionários com informações inválidas.

5. Crie uma classe `empresa` que segue o padrão Singleton e mantém um registro de todos os funcionários da empresa. Implemente métodos para adicionar funcionários, calcular salários, listar funcionários e aumentar o salário de todos os funcionários.

_________________________________________________________________________

Sistema de Gerenciamento de Estoque em C++

Desenvolva um programa em C++ que simule um sistema de gerenciamento de estoque para uma loja de eletrônicos. O programa deve ser orientado a objetos e deve incorporar os seguintes recursos:

1. **Classe `produto`**:

    - Crie uma classe chamada `produto` que represente um produto eletrônico com as seguintes informações:
        - Nome do produto.
	- Descrição do produto (representada como um tipo de dado flexível usando templates).
        - Número de série (único para cada produto).
        - Preço unitário.
        - Quantidade em estoque.

    - Implemente um construtor que inicialize as informações do produto, incluindo a descrição como um tipo flexível
    - Implemente métodos para:
        - Atualizar o preço unitário do produto.
        - Adicionar unidades ao estoque.
        - Vender unidades do produto.

2. **Classe `gerenciador_estoque`**:

    - Crie uma classe de controle chamada `gerenciador_estoque` com métodos e atributos de classe (estáticos) para rastrear informações globais sobre o estoque, incluindo:
        - O número total de produtos no estoque.
        - O valor total do estoque.
        - O produto mais caro em estoque.

    - Utilize o padrão de projeto Singleton para garantir que apenas uma instância da classe `gerenciador_estoque` exista.

    - Implemente métodos estáticos para:
        - Adicionar um produto ao estoque.
        - Listar todos os produtos em estoque.
        - Calcular o valor total do estoque.
        - Encontrar o produto mais caro em estoque.

3. **Classe `cliente`**:

    - Crie uma classe chamada `cliente` que represente um cliente da loja com as seguintes informações:
        - Nome do cliente.
        - ID do cliente.
        - Histórico de compras (utilize um contêiner da STL, como `vector`).

    - Implemente métodos para:
        - Adicionar produtos ao carrinho de compras.
        - Finalizar uma compra, que envolve a transferência dos produtos do carrinho para o histórico de compras do cliente.

4. **Classe `loja`**:

    - Crie uma classe chamada `loja` que represente a loja de eletrônicos.
    - Implemente um método para atender um cliente, permitindo que o cliente adicione produtos ao carrinho e finalize a compra.

Implemente o sistema de gerenciamento de estoque conforme os requisitos acima, incorporando tratamento de exceções para lidar com situações de erro, como preços inválidos, estoque insuficiente e operações inválidas.
